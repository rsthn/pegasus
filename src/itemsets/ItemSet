#ifndef __ITEMSET_H
#define __ITEMSET_H

#include <asr/utils/List>
#include <asr/utils/Triad>
#include <asr/utils/Linkable>
#include "Item"

namespace psxt
{
	using asr::utils::Linkable;
	using asr::utils::Triad;

	// Forward declarations.
	ReachSet *ReachSet__buildFromItemSet (ItemSet *itemset, Context *context);

	/**
	 * @brief Describes an ItemSet.
	 */

	class ItemSet
	{
		protected:

		/**
		 * @brief ID of the itemset.
		 */
		int id;

		/**
		 * @brief List with one or more items.
		 */
		List<Item*> *list;

		/**
		 * @brief All parents of the itemset. Usually should be only one, however when an itemset is recycled it may have several paths that lead to it.
		 */
		List<ItemSet*> *parents;

		/**
		 * @brief Hash code of the itemset. Set internally after the set is closed.
		 */
		uint32_t hash;

		/**
		 * @brief Signature of the itemset. Set using buildSignature().
		 */
		LString *signature;

		/**
		 * @brief Reach set of the itemset. Generated after the itemset is closed.
		 */
		ReachSet *reachSet;

		public:

		/**
		 * @brief Constructs an empty itemset.
		 * @param id 
		 */
		ItemSet (int id=0)
		{
			this->id = id;
			this->signature = nullptr;
			this->reachSet = nullptr;

			this->list = new List<Item*> ();
			this->parents = new List<ItemSet*> ();
		}

		/**
		 * @brief Destroy the itemset and all items.
		 */
		virtual ~ItemSet()
		{
			delete list->clear();
			delete parents->reset();

			if (this->reachSet != nullptr)
				ReachNode__destroy ((ReachNode*)this->reachSet);

			if (this->signature != nullptr)
				this->signature->free();
		}

		public:

		/**
		 * @brief Sets the ID of the itemset.
		 * @param id 
		 */
		void setId (int id) {
			this->id = id;
		}

		/**
		 * @brief Returns the ID of the itemset.
		 * @return int 
		 */
		int getId() const {
			return this->id;
		}

		/**
		 * @brief Returns the signature of the itemset.
		 * @return LString* 
		 */
		LString *getSignature() const {
			return this->signature;
		}

		/**
		 * @brief Returns the hash code of the itemset.
		 * @return uint32_t 
		 */
		uint32_t getHash() const {
			return this->hash;
		}

		/**
		 * @brief Returns the reach set of the itemset.
		 * @return ReachSet* 
		 */
		ReachSet *getReachSet() {
			return this->reachSet;
		}

		/**
		 * @brief Adds a parent reference to the itemset.
		 * @param parent 
		 */
		void addParent (ItemSet *parent) {
			this->parents->push (parent);
		}

		/**
		 * @brief Returns all parents of the itemset.
		 * @return List<ItemSet*>* 
		 */
		List<ItemSet*> *getParents() {
			return this->parents;
		}

		/**
		 * @brief Returns the item list.
		 * @return List<Item*>* 
		 */
		List<Item*> *getItems() {
			return this->list;
		}

		/**
		 * @brief Compares the itemsets and returns a boolean indicating if they're equal or not.
		 * @param item 
		 * @return bool 
		 */
		bool equals (ItemSet *item)
		{
			if (item == nullptr) return false;

			if (item->list->length() != this->list->length())
				return false;

			for (Linkable<Item*> *i = this->list->head(); i; i = i->next())
			{
				Item *k = item->getItems()->get(i->value);
				if (k == nullptr) return false;

				// violet:COMPARE FOLLOW SET
			}

			return true;
		}

		/**
		 * @brief Compares the ID of the itemset. Returns 0 if IDs are equal.
		 * @param value 
		 * @return int 
		 */
		int compare (int value) {
			return this->id - value;
		}

		/**
		 * @brief Compares the itemsets and return 0 if are equal.
		 * @param item 
		 * @return int 
		 */
		int compare (ItemSet *item) {
			return equals(item) ? 0 : 1;
		}

		/**
		 * @brief Returns true if the specified item is contained in the itemset.
		 * @param item 
		 * @return bool 
		 */
		bool contains (Item *item) {
			return this->list->contains(item);
		}

		private:

		/**
		 * @brief Structure that groups several items with a charset pattern. This is used to factorize a CharSet for further processing.
		 */
		struct Group
		{
			List<Item*> *items;
			CharSet *charset;

			// violet: add comments
			Group (CharSet *charset, Item *item = nullptr)
			{
				this->items = new List<Item*> ();
				this->charset = charset;

				if (item != nullptr)
					addItem (item);
			}

			~Group() {
				delete this->items->reset();
				delete charset;
			}

			void addItem (Item *item)
			{
				if (items->contains (item))
					return;

				items->push (item);
			}

			void addItems (List<Item*> *list)
			{
				for (Linkable<Item*> *i = list->head(); i; i = i->next())
				{
					if (!items->contains (i->value))
						items->push (i->value);
				}
			}

			int compare (CharSet *val) {
				return this->charset->equals ((CharSet *)val) ? 0 : 1;
			}
		};

		public:

		/**
		 * @brief Factorizes common pattern strings and introduces new rules if necessary.
		 */
		void factorize()
		{
			Linkable<Item*> *ni;

			List<List<Group*>*> *stack = new List<List<Group*>*> ();
			List<Group*> *list = new List<Group*> ();

			for (Linkable<Item*> *i = this->list->head(); i; i = ni)
			{
				ni = i->next();

				if (i->value->getElem() == nullptr)
					continue;

				if (i->value->getElem()->getType() != Token::Type::SQSTRING && i->value->getElem()->getType() != Token::Type::DQSTRING)
					continue;

				list->push (new Group (new CharSet (i->value->getElem()->getValue()), i->value));
				this->list->remove (i);
			}

			stack->push (list);

			CharSet *temp = new CharSet();
			CharSet *accum = new CharSet();

			while (stack->tail()->value->length() > 1)
			{
				List<Group*> *output = new List<Group*> ();

				list = stack->tail()->value;

				for (Linkable<Group*> *i = list->head(); i; i = i->next())
				{
					for (Linkable<Group*> *j = i->next(); j; j = j->next())
					{
						if (temp->set(i->value->charset)->_and(j->value->charset)->isEmpty())
							continue;

						Group *g = output->get(temp);
						if (g == nullptr)
						{
							g = new Group (new CharSet (temp));
							output->push (g);
						}

						g->addItems (i->value->items);
						g->addItems (j->value->items);
					}
				}

				stack->push (output);
			}

			accum->clear()->_not();

			while ((list = stack->pop()) != nullptr)
			{
				temp->clear();

				for (Linkable<Group*> *i = list->head(); i; i = i->next())
				{
					if (i->value->charset->_and (accum)->isEmpty())
					{
						if (!stack->length())
							i->value->items->clear();

						continue;
					}

					LString *p = i->value->charset->toString();

					for (Linkable<Item*> *j = i->value->items->head(); j; j = j->next())
					{
						Item *w = new Item (j->value);
						w->overrideElem (p);

						this->list->push (w);
					}

					if (!stack->length())
						i->value->items->clear();

					p->free();

					temp->_or (i->value->charset);
				}

				delete list->clear();

				accum->_and (temp->_not());
			}

			delete temp;
			delete accum;

			delete stack->clear();
		}

		/**
		 * @brief Adds all rules of a non-terminal to the itemset. Each production will be converted to an item before adding it.
		 * @param nonterm 
		 */
		void addNonTerminal (NonTerminal *nonterm)
		{
			if (!nonterm) return;

			Item *item = nullptr;

			for (Linkable<ProductionRule*> *i = nonterm->getRules()->head(); i; i = i->next())
			{
				if (item == nullptr)
					item = new Item (i->value);
				else
					item->set (i->value);

				if (this->contains(item))
					continue;

				this->list->push(item);
				item = nullptr;
			}

			if (item != nullptr) delete item;
		}

		/**
		 * @brief Adds an item to the itemset.
		 * @param item 
		 * @return bool 
		 */
		bool addItem (Item *item)
		{
			if (item == nullptr || this->contains(item))
				return false;

			this->list->push (item);
			return true;
		}

		/**
		 * @brief Builds and sets the signature of the itemset.
		 */
		void buildSignature()
		{
			// violet: check this static buffer!
			static char buffer[8192];

			List<Item*> *ordered = new List<Item*> ();

			// Add first item to the queue.
			if (this->list->head())
				ordered->push(this->list->first());

			// Add each item to the queue ordered in ascending order by hash.
			for (auto i = this->list->head() ? this->list->head()->next() : nullptr; i; i = i->next())
			{
				uint32_t h = i->value->getHash();
				bool insertAtBottom = true;

				// Insert item in the appropriate position.
				for (auto j = ordered->head(); j; j = j->next())
				{
					if (h < j->value->getHash())
					{
						ordered->insertBefore (j, i->value);
						insertAtBottom = false;
						break;
					}
				}

				if (insertAtBottom) ordered->push(i->value);
			}

			char *buff = buffer;
			*buff = '\0';

			for (auto i = ordered->head(); i; i = i->next())
			{
				sprintf(buff, "%s%x", i->prev() != nullptr ? ":" : "", i->value->getHash());
				buff += strlen(buff);
			}

			delete ordered->reset();

			if (this->signature != nullptr)
				this->signature->free();

			this->signature = LString::alloc(buffer);
		}

		/**
		 * @brief Performs the closure operation in the itemset. The context and section will be used to obtain any required non-terminal definitions.
		 * @param context Global context.
		 * @param section Section ID.
		 */
		void close (Context *context, Context::SectionType section)
		{
			buildSignature();

			for (Linkable<Item*> *i = this->list->head(); i; i = i->next())
			{
				if (i->value->getElem() == nullptr)
					continue;

				if (i->value->getElem()->getType() != Token::Type::IDENTIFIER)
					continue;

				addNonTerminal (i->value->getElem()->getNonTerminal());
			}

			if (section == Context::SectionType::LEXICON)
				this->factorize();

			hash = 0;

			for (Linkable<Item*> *i = this->list->head(); i; i = i->next())
				hash += i->value->getHash();
		}

		/**
		 * @brief Creates the reach set of the itemset.
		 * @param context Global context.
		 * @param section Section ID.
		 */
		void createReachSet (Context *context, Context::SectionType section)
		{
			if (this->reachSet != nullptr)
				return;

			if (section == Context::SectionType::GRAMMAR)
			{
				printf ("--- [GRAMMAR] REACHSET FOR ITEMSET %u ---\n", id);
				this->reachSet = ReachSet__buildFromItemSet (this, context);
			}

			if (section == Context::SectionType::LEXICON)
			{
				printf ("--- [LEXICON] REACHSET FOR ITEMSET %u ---\n", id);
				this->reachSet = ReachSet__buildFromItemSet (this, context);
			}
		}

		/**
		 * @brief Rewires the items in the itemset such that all currently linked to oldItemSet will now be linked to newItemSet.
		 * @param oldItemSet 
		 * @param newItemSet 
		 */
		void rewire (ItemSet *oldItemSet, ItemSet *newItemSet)
		{
			for (Linkable<Item*> *i = this->list->head(); i; i = i->next())
				i->value->rewire (oldItemSet, newItemSet);
		}

		/**
		 * @brief Dumps the itemset to the specified stream.
		 * @param outputStream
		 */
		void dump (FILE *outputStream)
		{
			fprintf(outputStream, "ITEMSET %u", id);

			if (this->parents->length() != 0)
			{
				fprintf(outputStream, " <");

				for (Linkable<ItemSet*> *i = this->parents->head(); i; i = i->next()) {
					fprintf(outputStream, "%s%u", i->prev() ? "," : "", i->value->getId());
				}

				fprintf(outputStream, ">");
			}

			for (Linkable<Item*> *i = this->list->head(); i; i = i->next())
			{
				fprintf(outputStream, "\n   [%u] ", i->value->getTransition() ? i->value->getTransition()->getId() : 0);
				i->value->dump(outputStream);
			}

			fprintf(outputStream, "\n\n");
		}
	};
};

#endif
