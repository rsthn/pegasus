#ifndef __NONTERMINAL_H
#define __NONTERMINAL_H

#include <asr/utils/List>

#include "ProductionRule"
#include "LString"

namespace psxt
{
    using asr::utils::List;

    /**
     * @brief Describes a non-terminal, that is a named set with one or more production rules.
     */
    class NonTerminal
    {
        protected:

        /**
         * @brief ID of the non-terminal.
         */
        int id;

        /**
         * @brief Name of the non-terminal.
         */
        LString *name;

        /**
         * @brief Return type of the non-terminal.
         */
        LString *returnType;

        /**
         * @brief List of production rules.
         */
        List<ProductionRule*> *rules;

        /**
         * @brief Next available production rule ID.
         */
        int availableId;

        public:

        /**
         * @brief Initializes the non-terminal definition.
         *
         * @param id ID of the non-terminal.
         * @param name Non-terminal name.
         */
        NonTerminal (int id, LString *name)
        {
            this->id = id;
            this->rules = new List<ProductionRule*> ();

            this->name = name;
            this->availableId = 1;

            this->returnType = nullptr;
        }

        /**
         * @brief Destroys the non-terminal object along with all rules.
         */
        virtual ~NonTerminal()
        {
            delete this->rules->clear();
            this->name->free();

            if (this->returnType != nullptr)
                this->returnType->free();
        }

        /**
         * @brief Returns the ID of the non-terminal.
         * @return int 
         */
        int getId() {
            return this->id;
        }

        /**
         * @brief Returns the name of the non-terminal.
         * @return const LString* 
         */
        LString *getName() {
            return this->name;
        }

        /**
         * @brief Returns 0 if the provided non-terminal reference is identical to this.
         * @return int 
         */
        int compare (NonTerminal *value) {
            return this - value;
        }

        /**
         * @brief Returns 0 if the specified string matches the non-terminal's name.
         * @return int 
         */
        int compare (LString *value) {
            return name->equals(value) ? 0 : 1;
        }

        /**
         * @brief Sets the return-type of the non-terminal.
         * @param value 
         * @return NonTerminal* 
         */
        NonTerminal *setReturnType (LString *value)
        {
            if (this->returnType != nullptr)
                this->returnType->free();

            this->returnType = value;
            return this;
        }

        /**
         * @brief Returns the return-type of the non-terminal.
         * @return LString* 
         */
        LString *getReturnType() {
            return this->returnType;
        }

        /**
         * @brief Returns the non-terminal's production rules.
         * @return List<ProductionRule*>* 
         */
        List<ProductionRule*> *getRules() {
            return this->rules;
        }

        /**
         * @brief Returns the next ID available for a production rule.
         * @return int 
         */
        int nextId() {
            return availableId++;
        }

        /**
         * @brief Adds a production rule to the non-terminal.
         * @param rule 
         */
        void addRule (ProductionRule *rule)
        {
            if (this->rules->contains(rule))
                delete rule;
            else
                this->rules->push (rule);
        }
    };
};

#endif
