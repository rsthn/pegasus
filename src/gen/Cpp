#ifndef __GEN_CPP_H
#define __GEN_CPP_H

#include "Generator"

#include "tpl/scanner_cpp.h"
#include "tpl/parser_cpp.h"

namespace gen
{
	using namespace psxt;

	/**
	**	Generator for C++ code.
	*/

	class GeneratorCpp : public Generator
	{
		protected:

		/**
		 * @brief Temporal charset object used to get characters of a pattern string.
		 */
		CharSet *charset;

		/**
		 * @brief Writes code for a reduction to the output stream.
		 * @param reduce 
		 * @param section 
		 * @param nl 
		 */
		void writeReduction (FsmState::ReduceAction *reduce, Context::SectionType section, const char *nl)
		{
			writef ("%s nonterm = %u;", nl, reduce->rule->getNonTerminal()->getId());
			writef (" release = %u;", reduce->rule->getElems()->length());
			writef (" reduce = %u;", reduce->rule->getVisibility() + 1);

			if (reduce->rule->getVisibility() == 1)
				writef (" code = %d;", getExportId (section, reduce->rule->getElems()->head()->value));

			int maxMarkers = reduce->rule->getLength();
			bool isNull = false;

			if (section == Context::SectionType::LEXICON)
				return;

			if (reduce->rule->getNonTerminal()->getReturnType() != nullptr && reduce->rule->getNonTerminal()->getReturnType()->cequals("null"))
				isNull = true;

			writef (" rule = %u;", reduce->rule->getId());
			writef (" shifted = %u;", reduce->rule->getLength());
			writef ("%s ", nl);

			if (!isNull) write ("temp = (void *)(");

			List<Pair<int, const char*>*> *left = replaceMarkers (reduce->rule->getAction() ? reduce->rule->getAction()->c_str() : "nullptr", 
				maxMarkers, section, reduce->rule, "Token *");

			if (!isNull) write (")");

			write (";");

			for (Linkable<Pair<int, const char*>*> *i = left->head(); i; i = i->next())
			{
				if (isConstPtr(i->value->value))
					continue;

				writef ("%s if (argv[bp-%u]) delete (%s)argv[bp-%u];", nl, 
					maxMarkers - i->value->key,
					i->value->value, maxMarkers - i->value->key);
			}

			delete left->clear();

			writef ("%s argv[bp-shifted] = %s;", nl, isNull ? "nullptr" : "temp");
		}

		/**
		 * @brief Writes code for a lookahead condition.
		 * @param list 
		 */
		void writeCondition (List<Token*> *list)
		{
			for (Linkable<Token*> *i = list->head(); i; i = i->next())
			{
				if (i != list->head()) write (" || ");

				if (i->value->getNValue() != nullptr)
					writef ("token->equals(%d, \"%s\")", getExportId(Context::SectionType::LEXICON, i->value), i->value->getNValue()->getCstr());
				else
					writef ("symbol==%d", getExportId(Context::SectionType::LEXICON, i->value));
			}
		}

		/**
		 * @brief Generates the code of the finite state machine.
		 * @param states 
		 * @param section 
		 */
		virtual void generate (List<FsmState*> *states, Context::SectionType section)
		{
			const char *nl1 = "\n   ";
			const char *nl2 = "\n       ";
			const char *nl3 = "\n           ";
			const char *nl4 = "\n               ";

			write ("switch (state)\n{");

			for (Linkable<psxt::FsmState*> *i = states->head(); i; i = i->next())
			{
				FsmState::ReduceAction *defaultReduction = nullptr;
				psxt::FsmState *state = i->value;

				writef ("%s case %u:", nl1, state->getId());

				// Write GOTO actions.
				if (state->getGotoActions() != nullptr)
				{
					writef ("%s if (reduce)", nl2);
					writef ("%s {", nl2);
					writef ("%s switch (nonterm)", nl3);
					writef ("%s {", nl3);

					for (Linkable<psxt::FsmState::GotoAction*> *i = state->getGotoActions()->head(); i; i = i->next())
						writef ("%s case %u: state = %u; break;", nl4, i->value->nonterm->getId(), i->value->nextState->getId());

					writef ("%s }\n", nl3);
					writef ("%s reduce = 0;", nl3);
					writef ("%s break;", nl3);
					writef ("%s }\n", nl2);
				}

				// Write REDUCE actions.
				if (state->getReduceActions() != nullptr && section != Context::SectionType::LEXICON)
				{
					for (Linkable<psxt::FsmState::ReduceAction*> *i = state->getReduceActions()->head(); i; i = i->next())
					{
						if (!i->value->hasFollow())
						{
							defaultReduction = i->value;
							continue;
						}

						writef ("%s if (", nl2);
						writeCondition (i->value->getFollow());
						write (") {");

						writeReduction (i->value, section, nl3);

						writef ("%s break;%s }\n", nl3, nl2);
					}
				}

				// Write SHIFT actions.
				if (state->getShiftActions() != nullptr)
				{
					writef ("%s switch (symbol)", nl2);
					writef ("%s {", nl2);

					switch (section)
					{
						case Context::SectionType::LEXICON:
							for (Linkable<psxt::FsmState::ShiftAction*> *i = state->getShiftActions()->head(); i; i = i->next())
							{
								writef ("%s ", nl3);

								if (i->value->value->getType() == Token::Type::END)
								{
									write ("case -1: ");
								}
								else
								{
									const char *buff = charset->set (i->value->value->getValue())->getBuffer();
									int j = 256;

									while (j--)
									{
										if (*buff++)
											writef ("case %u: ", 255 - j);
									}
								}

								writef ("state = %u; shift = 1; break;", i->value->nextState->getId());
							}

							break;

						case Context::SectionType::GRAMMAR:
							for (Linkable<psxt::FsmState::ShiftAction*> *i = state->getShiftActions()->head(); i; i = i->next())
							{
								if (i->value->nextState == nullptr)
									continue;

								writef ("%s ", nl3);

								if (i->value->value->getType() == Token::Type::END)
								{
									write ("case -1: ");
									writef ("state = %u; shift = 1; break;", i->value->nextState->getId());
									continue;
								}

								writef ("case %u: ", getExportId (Context::SectionType::LEXICON, i->value->value));

								for (Linkable<psxt::FsmState::ShiftAction*> *j = i; j; j = j->next())
								{
									if (!j->value->value->equals (i->value->value))
										continue;

									if (j->value->value->getNValue() != nullptr)
										writef ("%s if (token->equals(\"%s\")) { ", nl4, j->value->value->getNValue()->getCstr());

									writef ("state = %u; shift = 1;", j->value->nextState->getId());

									if (j->value->value->getNValue() != nullptr)
										writef (" break; }");

									j->value->nextState = nullptr;
								}

								writef ("%s break;", nl4);
							}

							break;

						default:
							break;
					}

					writef ("%s }\n", nl2);
				}

				// Write last REDUCE action.
				if (defaultReduction != nullptr || (state->getReduceActions() != nullptr && section == Context::SectionType::LEXICON))
				{
					if (!defaultReduction)
						defaultReduction = state->getReduceActions()->head()->value;

					if (state->getShiftActions() != nullptr)
						writef ("%s if (shift) break;\n", nl2);

					writeReduction (defaultReduction, section, nl2);
				}

				if (defaultReduction == nullptr && state->getShiftActions() != nullptr)
					writef ("%s if (!shift) error = 1;", nl2);

				writef ("%s break;\n", nl2);
			}

			write ("}");
		}

		/**
		 * @brief Generates the epilogue code to replace marker `$E` on the template.
		 * @param section 
		 */
		virtual void epilogue (Context::SectionType section)
		{
			if (section != Context::SectionType::LEXICON)
				return;

			const char *nl3 = "           ";
			const char *nl4 = "\n               ";

			for (Linkable<Pair<LString*, NonTerminal*>*> *i = context->getNonTerminalPairs(Context::SectionType::ARRAYS)->head(); i; i = i->next())
			{
				int id = getExportId (Context::SectionType::LEXICON, i->value->value->getReturnType());
				int id2 = getExportId (Context::SectionType::LEXICON, i->value->key);

				writef ("%s if (token->getType() == %u)\n", nl3, id);
				writef ("%s {", nl3);

				for (Linkable<Token*> *j = i->value->value->getRules()->head()->value->getElems()->head(); j; j = j->next())
				{
					writef ("%s if (token->equals(\"%s\")) { return token->setType(%u); }", nl4, j->value->getCstr(), id2);
				}

				writef ("\n%s }\n", nl3);
			}

			writef ("\n%s return token;", nl3);
		}

		public:

		/**
		 * @brief Generates the code of a state machine given its states.
		 * @param context 
		 * @param suffix 
		 */
		GeneratorCpp (Context *context, const char *&suffix) : Generator(context)
		{
			charset = new CharSet();
			suffix = ".h";
		}

		/**
		 * @brief Destroys the generator and related resources.
		 */
		virtual ~GeneratorCpp ()
		{
			delete charset;
		}

		/**
		 * @brief Generates code for the specified states of a given section and saves it to the specified output. This function should simply
		 * determine what kind of code template buffer should be used to generate code and used it on a call to generate/5.
		 */
		virtual void generate (List<FsmState*> *states, Context::SectionType section, FILE *output, String *name)
		{
			setOutputStream(output);

			if (section == Context::SectionType::LEXICON)
				writeTemplate (states, section, name, (char*)&scanner_cpp[0], sizeof(scanner_cpp));
			else
				writeTemplate (states, section, name, (char*)&parser_cpp[0], sizeof(parser_cpp));
		}
	};

};

#endif
